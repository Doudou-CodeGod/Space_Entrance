{"version":3,"file":"BloomPass-b3911fe1.js","sources":["../../node_modules/three/examples/jsm/shaders/ConvolutionShader.js","../../node_modules/three/examples/jsm/postprocessing/BloomPass.js"],"sourcesContent":["import {\n\tVector2\n} from 'three';\n\n/**\n * Convolution shader\n * ported from o3d sample to WebGL / GLSL\n */\n\nconst ConvolutionShader = {\n\n\tdefines: {\n\n\t\t'KERNEL_SIZE_FLOAT': '25.0',\n\t\t'KERNEL_SIZE_INT': '25'\n\n\t},\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'uImageIncrement': { value: new Vector2( 0.001953125, 0.0 ) },\n\t\t'cKernel': { value: [] }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tuniform vec2 uImageIncrement;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float cKernel[ KERNEL_SIZE_INT ];\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec2 uImageIncrement;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec2 imageCoord = vUv;\n\t\t\tvec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );\n\n\t\t\tfor( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {\n\n\t\t\t\tsum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];\n\t\t\t\timageCoord += uImageIncrement;\n\n\t\t\t}\n\n\t\t\tgl_FragColor = sum;\n\n\t\t}`,\n\n\tbuildKernel: function ( sigma ) {\n\n\t\t// We lop off the sqrt(2 * pi) * sigma term, since we're going to normalize anyway.\n\n\t\tconst kMaxKernelSize = 25;\n\t\tlet kernelSize = 2 * Math.ceil( sigma * 3.0 ) + 1;\n\n\t\tif ( kernelSize > kMaxKernelSize ) kernelSize = kMaxKernelSize;\n\n\t\tconst halfWidth = ( kernelSize - 1 ) * 0.5;\n\n\t\tconst values = new Array( kernelSize );\n\t\tlet sum = 0.0;\n\t\tfor ( let i = 0; i < kernelSize; ++ i ) {\n\n\t\t\tvalues[ i ] = gauss( i - halfWidth, sigma );\n\t\t\tsum += values[ i ];\n\n\t\t}\n\n\t\t// normalize the kernel\n\n\t\tfor ( let i = 0; i < kernelSize; ++ i ) values[ i ] /= sum;\n\n\t\treturn values;\n\n\t}\n\n};\n\nfunction gauss( x, sigma ) {\n\n\treturn Math.exp( - ( x * x ) / ( 2.0 * sigma * sigma ) );\n\n}\n\nexport { ConvolutionShader };\n","import {\n\tAdditiveBlending,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { ConvolutionShader } from '../shaders/ConvolutionShader.js';\n\nclass BloomPass extends Pass {\n\n\tconstructor( strength = 1, kernelSize = 25, sigma = 4 ) {\n\n\t\tsuper();\n\n\t\t// render targets\n\n\t\tthis.renderTargetX = new WebGLRenderTarget(); // will be resized later\n\t\tthis.renderTargetX.texture.name = 'BloomPass.x';\n\t\tthis.renderTargetY = new WebGLRenderTarget(); // will be resized later\n\t\tthis.renderTargetY.texture.name = 'BloomPass.y';\n\n\t\t// combine material\n\n\t\tthis.combineUniforms = UniformsUtils.clone( CombineShader.uniforms );\n\n\t\tthis.combineUniforms[ 'strength' ].value = strength;\n\n\t\tthis.materialCombine = new ShaderMaterial( {\n\n\t\t\tuniforms: this.combineUniforms,\n\t\t\tvertexShader: CombineShader.vertexShader,\n\t\t\tfragmentShader: CombineShader.fragmentShader,\n\t\t\tblending: AdditiveBlending,\n\t\t\ttransparent: true\n\n\t\t} );\n\n\t\t// convolution material\n\n\t\tconst convolutionShader = ConvolutionShader;\n\n\t\tthis.convolutionUniforms = UniformsUtils.clone( convolutionShader.uniforms );\n\n\t\tthis.convolutionUniforms[ 'uImageIncrement' ].value = BloomPass.blurX;\n\t\tthis.convolutionUniforms[ 'cKernel' ].value = ConvolutionShader.buildKernel( sigma );\n\n\t\tthis.materialConvolution = new ShaderMaterial( {\n\n\t\t\tuniforms: this.convolutionUniforms,\n\t\t\tvertexShader: convolutionShader.vertexShader,\n\t\t\tfragmentShader: convolutionShader.fragmentShader,\n\t\t\tdefines: {\n\t\t\t\t'KERNEL_SIZE_FLOAT': kernelSize.toFixed( 1 ),\n\t\t\t\t'KERNEL_SIZE_INT': kernelSize.toFixed( 0 )\n\t\t\t}\n\n\t\t} );\n\n\t\tthis.needsSwap = false;\n\n\t\tthis.fsQuad = new FullScreenQuad( null );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render quad with blured scene into texture (convolution pass 1)\n\n\t\tthis.fsQuad.material = this.materialConvolution;\n\n\t\tthis.convolutionUniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.convolutionUniforms[ 'uImageIncrement' ].value = BloomPass.blurX;\n\n\t\trenderer.setRenderTarget( this.renderTargetX );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\n\t\t// Render quad with blured scene into texture (convolution pass 2)\n\n\t\tthis.convolutionUniforms[ 'tDiffuse' ].value = this.renderTargetX.texture;\n\t\tthis.convolutionUniforms[ 'uImageIncrement' ].value = BloomPass.blurY;\n\n\t\trenderer.setRenderTarget( this.renderTargetY );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// Render original scene with superimposed blur to texture\n\n\t\tthis.fsQuad.material = this.materialCombine;\n\n\t\tthis.combineUniforms[ 'tDiffuse' ].value = this.renderTargetY.texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis.renderTargetX.setSize( width, height );\n\t\tthis.renderTargetY.setSize( width, height );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.renderTargetX.dispose();\n\t\tthis.renderTargetY.dispose();\n\n\t\tthis.materialCombine.dispose();\n\t\tthis.materialConvolution.dispose();\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n}\n\nconst CombineShader = {\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'strength': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float strength;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = strength * texel;\n\n\t\t}`\n\n};\n\nBloomPass.blurX = new Vector2( 0.001953125, 0.0 );\nBloomPass.blurY = new Vector2( 0.0, 0.001953125 );\n\nexport { BloomPass };\n"],"names":["ConvolutionShader","Vector2","sigma","kernelSize","halfWidth","values","sum","i","gauss","x","BloomPass","Pass","strength","WebGLRenderTarget","UniformsUtils","CombineShader","ShaderMaterial","AdditiveBlending","convolutionShader","FullScreenQuad","renderer","writeBuffer","readBuffer","deltaTime","maskActive","width","height"],"mappings":"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"}